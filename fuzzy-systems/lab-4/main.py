import matplotlib.pyplot as plt
import numpy as np

# Завдання 1: Застосування операції композиції бінарних нечітких відношень

def fuzzy_composition(S, Q):
    result = {}
    for (x, y), µSxy in S.items():
        for (y, z), µQyz in Q.items():
            if y == y:  # Перевірка, чи співпадають y
                result[(x, z)] = min(µSxy, µQyz)  # Використовуємо min для композиції
    return result

# Завдання 2: Створення матриці профілювання

MS = np.array([[0.8, 0.7, 0.6, 0.5, 0.9, 0.4, 0.3],
               [0.5, 0.6, 0.7, 0.4, 0.8, 0.3, 0.2],
               [0.4, 0.3, 0.2, 0.6, 0.7, 0.8, 0.9],
               [0.7, 0.8, 0.9, 0.3, 0.2, 0.1, 0.4]])

MQ = np.array([[0.6, 0.5, 0.4, 0.7, 0.8, 0.3],
               [0.8, 0.7, 0.6, 0.3, 0.2, 0.9],
               [0.3, 0.2, 0.1, 0.5, 0.6, 0.7],
               [0.5, 0.6, 0.7, 0.9, 0.8, 0.4],
               [0.9, 0.8, 0.7, 0.1, 0.2, 0.6],
               [0.2, 0.3, 0.4, 0.8, 0.7, 0.5],
               [0.7, 0.6, 0.5, 0.2, 0.1, 0.9]])

# Завдання 3: Запрограмувати алгоритм для знаходження переваг і недоліків

def find_advantages_disadvantages(MS, MQ):
    advantages = np.max(MS, axis=1)     # Знаходження максимальних значень для кожної спеціальності
    disadvantages = np.min(MQ, axis=1)  # Знаходження мінімальних значень для кожного претендента
    return advantages, disadvantages

# Використання функцій
S = {("x1", "y1"): 0.8, ("x1", "y2"): 0.7, ("x1", "y3"): 0.6, ("x1", "y4"): 0.5, 
     ("x1", "y5"): 0.9, ("x1", "y6"): 0.4, ("x1", "y7"): 0.3, 
     ("x2", "y1"): 0.5, ("x2", "y2"): 0.6, ("x2", "y3"): 0.7, ("x2", "y4"): 0.4, 
     ("x2", "y5"): 0.8, ("x2", "y6"): 0.3, ("x2", "y7"): 0.2, 
     ("x3", "y1"): 0.4, ("x3", "y2"): 0.3, ("x3", "y3"): 0.2, ("x3", "y4"): 0.6, 
     ("x3", "y5"): 0.7, ("x3", "y6"): 0.8, ("x3", "y7"): 0.9, 
     ("x4", "y1"): 0.7, ("x4", "y2"): 0.8, ("x4", "y3"): 0.9, ("x4", "y4"): 0.3, 
     ("x4", "y5"): 0.2, ("x4", "y6"): 0.1, ("x4", "y7"): 0.4}

Q = {("y1", "z1"): 0.6, ("y1", "z2"): 0.5, ("y1", "z3"): 0.4, ("y1", "z4"): 0.7, 
     ("y1", "z5"): 0.8, ("y1", "z6"): 0.3, 
     ("y2", "z1"): 0.8, ("y2", "z2"): 0.7, ("y2", "z3"): 0.6, ("y2", "z4"): 0.3, 
     ("y2", "z5"): 0.2, ("y2", "z6"): 0.9, 
     ("y3", "z1"): 0.3, ("y3", "z2"): 0.2, ("y3", "z3"): 0.1, ("y3", "z4"): 0.5, 
     ("y3", "z5"): 0.6, ("y3", "z6"): 0.7, 
     ("y4", "z1"): 0.5, ("y4", "z2"): 0.6, ("y4", "z3"): 0.7, ("y4", "z4"): 0.9, 
     ("y4", "z5"): 0.8, ("y4", "z6"): 0.4, 
     ("y5", "z1"): 0.9, ("y5", "z2"): 0.8, ("y5", "z3"): 0.7, ("y5", "z4"): 0.1, 
     ("y5", "z5"): 0.2, ("y5", "z6"): 0.6, 
     ("y6", "z1"): 0.2, ("y6", "z2"): 0.3, ("y6", "z3"): 0.4, ("y6", "z4"): 0.8, 
     ("y6", "z5"): 0.7, ("y6", "z6"): 0.5, 
     ("y7", "z1"): 0.7, ("y7", "z2"): 0.6, ("y7", "z3"): 0.5, ("y7", "z4"): 0.2, 
     ("y7", "z5"): 0.1, ("y7", "z6"): 0.9}

result = fuzzy_composition(S, Q)
print("Результат композиції:")
print(result)

advantages, disadvantages = find_advantages_disadvantages(MS, MQ)
print("\nПереваги претендентів:", advantages)
print("Недоліки претендентів:", disadvantages)

# Профілювання спеціальностей
specialties = ["Менеджер", "Програміст", "Водій", "Секретар"]
characteristics = ["Гнучкість", "Прийняття рішень", "Концентрація", "Зорова пам'ять", "Витривалість", "Реакція", "Відповідальність"]

plt.imshow(MS, cmap="viridis", aspect="auto")
plt.colorbar(label="Ступінь принадлежності")
plt.xticks(range(len(characteristics)), characteristics)
plt.yticks(range(len(specialties)), specialties)
plt.xlabel("Характеристика")
plt.ylabel("Спеціальність")
plt.title("Профілювання спеціальностей")
plt.show()

# Профілювання претендентів
applicants = ["Андрієнко", "Василенко", "Іваненко", "Дмитренко", "Петренко", "Романенко"]

plt.imshow(MQ, cmap="viridis", aspect="auto")
plt.colorbar(label="Ступінь принадлежності")
plt.xticks(range(len(applicants)), applicants)
plt.yticks(range(len(characteristics)), characteristics)
plt.xlabel("Претендент")
plt.ylabel("Характеристика")
plt.title("Профілювання претендентів")
plt.show()